// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoupDiscover.ORM;

namespace SoupDiscover.Database.SqliteData
{
    [DbContext(typeof(SqliteDataContext))]
    [Migration("20200610112104_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5");

            modelBuilder.Entity("SoupDiscover.Core.Respository.Repository", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Repositories");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Repository");
                });

            modelBuilder.Entity("SoupDiscover.ORM.Credential", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("SoupDiscover.ORM.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Licence")
                        .HasColumnType("TEXT");

                    b.Property<string>("PackageId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PackageType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("SoupDiscover.ORM.PackageConsumer", b =>
                {
                    b.Property<int>("PackageConsumerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PackageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("PackageConsumerId");

                    b.HasIndex("PackageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PackageConsumer");
                });

            modelBuilder.Entity("SoupDiscover.ORM.PackageConsumerPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageConsumerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PackageConsumerId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageConsumerPackages");
                });

            modelBuilder.Entity("SoupDiscover.ORM.SOUPSearchProject", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandLinesBeforeParse")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastAnalysisDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastAnalysisError")
                        .HasColumnType("TEXT");

                    b.Property<string>("NugetServerUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("RepositoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("RepositoryId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SoupDiscover.ORM.GitRepository", b =>
                {
                    b.HasBaseType("SoupDiscover.Core.Respository.Repository");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SshKeyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("SshKeyId");

                    b.HasDiscriminator().HasValue("GitRepository");
                });

            modelBuilder.Entity("SoupDiscover.ORM.PackageConsumer", b =>
                {
                    b.HasOne("SoupDiscover.ORM.Package", null)
                        .WithMany("PackageConsumers")
                        .HasForeignKey("PackageId");

                    b.HasOne("SoupDiscover.ORM.SOUPSearchProject", "Project")
                        .WithMany("PackageConsumers")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("SoupDiscover.ORM.PackageConsumerPackage", b =>
                {
                    b.HasOne("SoupDiscover.ORM.PackageConsumer", "PackageConsumer")
                        .WithMany("Packages")
                        .HasForeignKey("PackageConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoupDiscover.ORM.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoupDiscover.ORM.SOUPSearchProject", b =>
                {
                    b.HasOne("SoupDiscover.Core.Respository.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoupDiscover.ORM.GitRepository", b =>
                {
                    b.HasOne("SoupDiscover.ORM.Credential", "SshKey")
                        .WithMany()
                        .HasForeignKey("SshKeyId");
                });
#pragma warning restore 612, 618
        }
    }
}
